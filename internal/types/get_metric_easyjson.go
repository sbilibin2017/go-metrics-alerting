// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package types

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA1bbbbb7DecodeGoMetricsAlertingInternalTypes(in *jlexer.Lexer, out *GetMetricRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = string(in.String())
		case "type":
			out.MType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA1bbbbb7EncodeGoMetricsAlertingInternalTypes(out *jwriter.Writer, in GetMetricRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.MType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetMetricRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA1bbbbb7EncodeGoMetricsAlertingInternalTypes(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetMetricRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA1bbbbb7EncodeGoMetricsAlertingInternalTypes(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetMetricRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA1bbbbb7DecodeGoMetricsAlertingInternalTypes(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetMetricRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA1bbbbb7DecodeGoMetricsAlertingInternalTypes(l, v)
}
func easyjsonA1bbbbb7DecodeGoMetricsAlertingInternalTypes1(in *jlexer.Lexer, out *GetMetricPathResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA1bbbbb7EncodeGoMetricsAlertingInternalTypes1(out *jwriter.Writer, in GetMetricPathResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetMetricPathResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA1bbbbb7EncodeGoMetricsAlertingInternalTypes1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetMetricPathResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA1bbbbb7EncodeGoMetricsAlertingInternalTypes1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetMetricPathResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA1bbbbb7DecodeGoMetricsAlertingInternalTypes1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetMetricPathResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA1bbbbb7DecodeGoMetricsAlertingInternalTypes1(l, v)
}
func easyjsonA1bbbbb7DecodeGoMetricsAlertingInternalTypes2(in *jlexer.Lexer, out *GetMetricBodyResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "delta":
			if in.IsNull() {
				in.Skip()
				out.Delta = nil
			} else {
				if out.Delta == nil {
					out.Delta = new(int64)
				}
				*out.Delta = int64(in.Int64())
			}
		case "value":
			if in.IsNull() {
				in.Skip()
				out.Value = nil
			} else {
				if out.Value == nil {
					out.Value = new(float64)
				}
				*out.Value = float64(in.Float64())
			}
		case "id":
			out.ID = string(in.String())
		case "type":
			out.MType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA1bbbbb7EncodeGoMetricsAlertingInternalTypes2(out *jwriter.Writer, in GetMetricBodyResponse) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Delta != nil {
		const prefix string = ",\"delta\":"
		first = false
		out.RawString(prefix[1:])
		out.Int64(int64(*in.Delta))
	}
	if in.Value != nil {
		const prefix string = ",\"value\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(*in.Value))
	}
	{
		const prefix string = ",\"id\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ID))
	}
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix)
		out.String(string(in.MType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v GetMetricBodyResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA1bbbbb7EncodeGoMetricsAlertingInternalTypes2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v GetMetricBodyResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA1bbbbb7EncodeGoMetricsAlertingInternalTypes2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *GetMetricBodyResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA1bbbbb7DecodeGoMetricsAlertingInternalTypes2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *GetMetricBodyResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA1bbbbb7DecodeGoMetricsAlertingInternalTypes2(l, v)
}
